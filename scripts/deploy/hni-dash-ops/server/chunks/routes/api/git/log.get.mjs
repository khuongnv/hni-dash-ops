import{c as t,e}from"../../../_/nitro.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"node:fs";import"node:path";import"node:crypto";import"node:url";const n=t(async t=>{try{return process.env.VERCEL?await async function(){try{const t="khuongnv",e="nuxt-hni-dash-ops",n=await fetch(`https://api.github.com/repos/${t}/${e}/commits?per_page=20`),a=await n.json(),o=await fetch(`https://api.github.com/repos/${t}/${e}`),r=await o.json(),s=await fetch(`https://api.github.com/repos/${t}/${e}/branches`),i=await s.json(),c=a.map(t=>({hash:t.sha.substring(0,7),author:t.commit.author.name,email:t.commit.author.email,date:t.commit.author.date,message:t.commit.message})),m=i.map(t=>`origin/${t.name}`),h=c.map(t=>`* ${t.hash} ${t.message} (${t.author})`).join("\n");return{success:!0,data:{currentBranch:r.default_branch||"main",remoteBranches:m,commits:c,lastPush:null,rawLog:h,source:"github"}}}catch(t){return{success:!0,data:{currentBranch:"main",remoteBranches:["origin/main"],commits:[{hash:"unknown",author:"System",email:"system@example.com",date:(new Date).toISOString(),message:"Git log không khả dụng trên production"}],lastPush:null,rawLog:"Git log không khả dụng trên production environment",source:"fallback"}}}}():await async function(){const{execSync:t}=await import("child_process"),e=t("git log --oneline --graph --decorate --all -20",{encoding:"utf8",cwd:process.cwd()}),n=t('git log --pretty=format:"%h|%an|%ae|%ad|%s|%b" --date=iso -20',{encoding:"utf8",cwd:process.cwd()}).split("\n").map(t=>{const e=t.split("|");if(e.length>=5){const[t,n,a,o,r,s]=e,i=s?`${r}\n\n${s}`.trim():r;return{hash:null==t?void 0:t.trim(),author:null==n?void 0:n.trim(),email:null==a?void 0:a.trim(),date:null==o?void 0:o.trim(),message:i}}return null}).filter(t=>t&&t.hash),a=t("git branch --show-current",{encoding:"utf8",cwd:process.cwd()}).trim(),o=t("git branch -r",{encoding:"utf8",cwd:process.cwd()}).split("\n").map(t=>t.trim()).filter(t=>t);let r=null;try{const e=t("git log origin/main..HEAD --oneline",{encoding:"utf8",cwd:process.cwd()});e.trim()&&(r={unpushed:e.split("\n").filter(t=>t.trim()).length,commits:e.split("\n").filter(t=>t.trim())})}catch(t){}return{success:!0,data:{currentBranch:a,remoteBranches:o,commits:n,lastPush:r,rawLog:e,source:"local"}}}()}catch(t){throw e({statusCode:500,statusMessage:`Git log error: ${t.message}`})}});export{n as default};
